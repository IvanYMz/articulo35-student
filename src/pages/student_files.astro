---
import Layout from "../layouts/Layout.astro";
import { API_ROUTES } from "../lib/apiRoutes";
import type { StudentFiles } from "../types/types";

let data: StudentFiles | null = null;
let dataError: Error | null = null;

try {
    const response = await fetch(API_ROUTES.STUDENT_FILES);

    if (!response.ok) {
        throw new Error(`Failed to fetch data: ${response.statusText}`);
    }

    data = (await response.json()) as StudentFiles;
    console.log(data);
} catch (error) {
    dataError = error as Error;
}
---

<Layout title="Mis documentos">
    {
        dataError && (
            <div>
                <p>Es probable que aún no existan documentos disponibles</p>
                <p>Error {dataError.message}</p>
            </div>
        )
    }

    {
        data &&
        data.length > 0 &&
        ((data[0].name && data[0].name !== ".emptyFolderPlaceholder") ||
            (data[1] &&
                data[1].name &&
                data[1].name !== ".emptyFolderPlaceholder")) ? (
            <div class="overflow-y-auto">
                <h2>Mis documentos</h2>
                <ul>
                    {data.map((file) => (
                        <li class="file-item">
                            <button class="toggle-update-section">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    fill="#2d3c5a"
                                >
                                    <path d="m7 17.013 4.413-.015 9.632-9.54c.378-.378.586-.88.586-1.414s-.208-1.036-.586-1.414l-1.586-1.586c-.756-.756-2.075-.752-2.825-.003L7 12.583v4.43zM18.045 4.458l1.589 1.583-1.597 1.582-1.586-1.585 1.594-1.58zM9 13.417l6.03-5.973 1.586 1.586-6.029 5.971L9 15.006v-1.589z" />
                                    <path d="M5 21h14c1.103 0 2-.897 2-2v-8.668l-2 2V19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2z" />
                                </svg>
                            </button>
                            <button
                                class="openFileButton hover:shadow-lg hover:scale-105 cursor-pointer"
                                data-url={file.url}
                            >
                                <img
                                    src="/src/assets/FileTypePdf.svg"
                                    alt="Icono de archivo"
                                />
                                <span>{file.name}</span>
                            </button>
                            <div class="update-section">
                                <input
                                    type="file"
                                    class="file-input"
                                    accept="application/pdf"
                                    data-filename={file.name}
                                    data-filefolder={file.folder}
                                />
                                <button
                                    class="update-button"
                                    data-filename={file.name}
                                    data-filefolder={file.folder}
                                >
                                    Actualizar
                                </button>
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        ) : (
            !dataError && <p>No hay documentos disponibles.</p>
        )
    }
</Layout>

<style>
    ul {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        padding-top: 0.5rem;
        gap: 1rem;
    }
    li {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        width: 30%;
    }
    h2 {
        font-size: 1.25rem;
        font-weight: 600;
        padding-bottom: 0.5rem;
        margin-bottom: 0.5rem;
        color: #2d3c5a;
        border-bottom: 2px solid #2d3c5a;
    }
    div {
        background: white;
        width: 100%;
        padding: 1rem;
        border-radius: 0.5rem;
    }
    .update-button {
        border: solid 1px #2d3c5a;
        color: #2d3c5a;
        width: fit-content;
        align-self: center;
        padding: 0.5rem;
        border-radius: 0.3rem;
    }
    .update-button:hover {
        background: #2d3c5a;
        color: white;
    }
    .update-section {
        display: none;
    }
    .update-section.open {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    .toggle-update-section {
        align-self: flex-end;
        border-radius: 0.25rem;
        padding: 0.25rem;
    }
    .toggle-update-section.active,
    .toggle-update-section:hover {
        background: #2d3c5a;
    }
    .toggle-update-section.active svg,
    .toggle-update-section:hover svg {
        fill: white;
    }
    .openFileButton {
        width: 7rem;
        height: 9rem;
        border-radius: 0.25rem;
        padding: 0.5rem;
        border: solid 0.5px #2d3c5a;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
    .openFileButton span {
        width: 100%;
        color: #2d3c5a;
        text-align: left;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
    }
    .openFileButton img {
        width: 75px;
        height: 75px;
    }

    .error-box {
        background: #ffe6e6;
        color: #d8000c;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        border: 1px solid #d8000c;
    }

    @media (max-width: 768px) {
        ul {
            flex-direction: column;
            gap: 1rem;
        }
        li {
            width: 90%;
        }
    }
</style>

<script>
    import { API_ROUTES } from "../lib/apiRoutes";

    document.addEventListener("DOMContentLoaded", () => {
        const updateButtons =
            document.querySelectorAll<HTMLButtonElement>(".update-button");

        // Open file in new tab
        document
            .querySelectorAll<HTMLButtonElement>(".openFileButton")
            .forEach((button) => {
                button.addEventListener("click", () => {
                    const fileUrl = button.getAttribute("data-url");
                    if (fileUrl) {
                        window.open(fileUrl, "_blank", "noopener,noreferrer");
                    }
                });
            });

        // Show update section
        document
            .querySelectorAll<HTMLButtonElement>(".toggle-update-section")
            .forEach((button) => {
                button.addEventListener("click", (event) => {
                    const buttonElement =
                        event.currentTarget as HTMLButtonElement;
                    const fileItem = buttonElement.closest(".file-item");
                    if (!fileItem) return;

                    const updateSection =
                        fileItem.querySelector<HTMLElement>(".update-section");
                    if (updateSection) {
                        updateSection.classList.toggle("open");
                    }
                    buttonElement.classList.toggle("active");
                });
            });

        // Update file
        updateButtons.forEach((button) => {
            button.addEventListener("click", async (event) => {
                const buttonElement = event.currentTarget as HTMLButtonElement;
                const fileName =
                    buttonElement.getAttribute("data-filename") || "";
                const fileFolder =
                    buttonElement.getAttribute("data-filefolder") || "";
                const fileInput = document.querySelector<HTMLInputElement>(
                    `.file-input[data-filename="${fileName}"]`,
                );

                if (
                    !fileInput ||
                    !fileInput.files ||
                    fileInput.files.length === 0
                ) {
                    alert(
                        "Por favor, selecciona un archivo antes de actualizar.",
                    );
                    return;
                }

                const file = fileInput.files[0];
                const formData = new FormData();
                formData.append("file", file);
                formData.append("name", fileName);
                formData.append("folder", fileFolder);

                // Disable button and show loading state
                buttonElement.disabled = true;
                buttonElement.textContent = "Actualizando...";
                buttonElement.style.opacity = "0.6";
                buttonElement.style.cursor = "not-allowed";

                try {
                    const response = await fetch(API_ROUTES.UPDATE_FILES, {
                        method: "PUT",
                        body: formData,
                    });

                    if (!response.ok) {
                        throw new Error(
                            `Error al actualizar el archivo: ${response.statusText}`,
                        );
                    }

                    alert(`Archivo ${fileName} actualizado correctamente.`);
                    window.location.reload();
                } catch (error) {
                    console.error("Error al actualizar el archivo:", error);
                    alert(
                        "Hubo un error al actualizar el archivo. Inténtalo de nuevo.",
                    );
                } finally {
                    // Restore button state
                    buttonElement.disabled = false;
                    buttonElement.textContent = "Actualizar";
                    buttonElement.style.background = "";
                }
            });
        });
    });
</script>
